#include <iostream>
#include "../header/bestpath.hpp"
using namespace std;

int main()
{
    float costpath[16][16] ={{0, 0.2, 0.6, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0.2, 3.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0.6, 3.9, 0, 0, 3.8, 6.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0.2, 0, 0, 0, 0, 0, 4.8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0, 0, 3.8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0, 0, 6.3, 0, 2, 0, 3.8, 0, 0.3, 0, 0, 0, 0, 0, 0, 0 },
                            {0, 0, 0, 4.8, 0, 3.8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 9, 0, 0.1, 0, 0,0, 0, 0, 8.2, 0 },
                            {0, 0, 0, 0, 0, 0.3, 0, 0.1, 0,0.2, 0, 0, 0, 7, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0, 1.1, 0, 2, 0, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 0,0, 1.1, 0, 3.6, 0, 0, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.6, 0, 1.8, 0, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1.8, 0, 2.9, 0, 0.2 },
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.9, 0, 3.6, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 8.2, 0, 0, 0, 0, 0, 3.6, 0, 0 },
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0 }};
    
    float pathdis[16][16] = {{0, 0.2, 0.2, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0.2, 0,1.3, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0},
                             {0.2, 1.3, 0, 0, 1.9, 2.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0.2, 0, 0, 0, 0, 0, 2.4, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 1.9, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 2.1, 0, 2, 1.9, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 2.4, 0, 1.9, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 3, 0, 0.1, 0, 0, 0, 0, 0, 4.1, 0},
                             {0, 0, 0, 0, 0, 0.1, 0, 0.1, 0, 0.1, 0, 0, 0, 3.5, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0,0.1, 0, 1.1, 0, 2, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1, 0, 1.8, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0,0, 0, 1.8, 0, 0.6, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0.6, 0, 0.8, 0, 0.2},
                             {0, 0, 0, 0, 0, 0, 0, 0, 3.5, 0, 0, 0, 0.8, 0, 1.2, 0},
                             {0, 0, 0, 0, 0, 0, 0, 4.1, 0, 0, 0, 0, 0, 1.2, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2}};


    float** costptr = new float* [sizeof(pathdis)/sizeof(pathdis[0])];//ptr use for class
    float** distancePtr = new float* [sizeof(pathdis)/sizeof(pathdis[0])];
    for (size_t i = 0; i < sizeof(pathdis)/sizeof(pathdis[0]); i++)//initialize
    {
       costptr[i] = costpath[i];
       distancePtr[i] = pathdis[i];
    }
    int size = 0;//store size of graph
    size = (sizeof(pathdis)/sizeof(pathdis[0]));
    //call bestpath constructor
    bestpath finder(costptr,distancePtr,size);
    int request = 0;
    cout << "***************************"<<endl;
    cout << "What do you want?\n---------------------------  \n1-show bestpath \n2-show shortest path\n3-Exit" << endl;
    cout << "***************************"<<endl;
    cin>>request;
    while (request != 3)
    {
        if (request == 1)
        {
            finder.showpath(0); //call method
        }else if (request == 2)
        {
            finder.showpath(1);
        }
        cout << "***************************"<<endl;
        cout << "What do you want?\n--------------------------- \n1-show bestpath \n2-show shortest path\n3-Exit" << endl;
        cout << "***************************"<<endl;
        cin>>request;
    }
    
    return 0;
}